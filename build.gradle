import java.text.SimpleDateFormat;
import java.io.ByteArrayOutputStream;

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
    id "war"
    id "com.bmuschko.tomcat" version "2.5"
}

def ROBOT_MAIN_CLASS = "com.spartronics4915.frc2019.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
            if(!project.hasProperty("discover"))
                addresses = ["10.49.15.2"]
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
    jcenter()
}

configurations {
    pathWebappLibs
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    compile("gov.nist.math:jama:1.0.3");
    compile("org.java-websocket:Java-WebSocket:1.3.9")
    compile("com.bmuschko:gradle-tomcat-plugin:2.0")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    def tomcatVersion = '7.0.57'
    tomcat ("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    tomcat ("org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}")
    tomcat ("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    compile ("org.springframework:spring-webmvc:4.3.0.RELEASE")
    compile ("javax.servlet:javax.servlet-api:3.0.1")
    compile ("javax.servlet:jstl:1.2")
    pathWebappLibs group: "org.springframework", name: "spring-webmvc", version: "4.3.0.RELEASE"
    pathWebappLibs group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
    pathWebappLibs group: "javax.servlet", name: "jstl", version: "1.2"
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        String user = System.getProperty("user.name");
        SimpleDateFormat fmt = new SimpleDateFormat("MMMMM dd, hh:mm a");
        ByteArrayOutputStream gitinfo = new ByteArrayOutputStream();
        exec {
            ignoreExitValue true
            commandLine 'git', 'describe', "--tags", "--dirty"
            standardOutput = gitinfo
        }
        attributes (
            "Built-By": user,
            "Built-At": fmt.format(new Date()),
            "Code-Version": gitinfo.toString().trim()
        )
    }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    from(sourceSets.main.output) {
        exclude "com/spartronics4915/lidar/**"
        exclude "com/spartronics4915/path/**"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}

// context where tomcat is deployed, by default localhost:8080/
tomcatRun.contextPath = '/'
tomcatRunWar.contextPath = '/'
// XXX: todo here: make sure tomcatRunWar works (and has appropriate components)


